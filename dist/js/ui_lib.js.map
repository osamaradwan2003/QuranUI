{"version":3,"names":[],"mappings":"","sources":["ui_lib.js"],"sourcesContent":["/* jshint esversion: 6, proto: true */\r\n\r\n// start helpers Methods\r\n\r\nfunction cls() {\r\n  console.clear();\r\n  return;\r\n}\r\n\r\nfunction print(...msg) {\r\n  return console.log(...msg);\r\n}\r\n\r\nfunction error(msg) {\r\n  throw msg;\r\n}\r\n\r\nlet htmlRegex = new RegExp(/<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/);\r\nString.prototype.isHtml = function () {\r\n  return htmlRegex.test(this);\r\n};\r\n\r\nString.prototype.htmlFromStr = function () {\r\n  if (this.isHtml()) {\r\n    let temp, ele;\r\n    ele = this;\r\n    temp = document.createElement(\"div\");\r\n    temp.innerHTML = ele;\r\n    ele = temp.children;\r\n    return ele;\r\n  } else {\r\n    error(\"This String Is not a Like Html\");\r\n    return this;\r\n  }\r\n};\r\n\r\nString.prototype.each = function (callback, i) {\r\n  each.call(this, callback);\r\n  return this;\r\n};\r\n\r\nArray.prototype.each = function (callback) {\r\n  each.call(this, callback);\r\n  return this;\r\n};\r\n\r\nArray.prototype.isEmpty = function () {\r\n  return this.length == 0 || this.length == undefined;\r\n};\r\n\r\nObject.prototype.each = function (callback) {\r\n  each.call(this, callback);\r\n  return this;\r\n};\r\n\r\nObject.prototype.isEmpty = function () {\r\n  if (Object.keys(this).length == 0 && this.constructor === Object) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n *\r\n * @param {Function} callback\r\n */\r\n\r\nfunction each(callback) {\r\n  if (!isFunc(callback)) return;\r\n  let i = 0,\r\n    len = this.length;\r\n  if (Array.isArray(this) || isArrLike(this) || typeof this == \"string\") {\r\n    for (; i < len;) {\r\n      callback.call(this[i], this[i], i);\r\n      i++;\r\n    }\r\n  } else if (len == undefined || typeof this == \"object\") {\r\n    for (let key in this) {\r\n      callback.call(this[key], this[key], key);\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Function} arg\r\n * @returns {boolean}\r\n */\r\nfunction isFunc(arg) {\r\n  let t = toString.call(arg);\r\n  return t == \"[object Function]\" || typeof t == \"function\";\r\n}\r\n\r\nfunction isArrLike(obj) {\r\n  let t = type(obj),\r\n    length = !!obj && \"length\" in obj && obj.length;\r\n\r\n  if (isFunc(obj) || isWindow(obj)) return false;\r\n\r\n  return (\r\n    t === \"array\" ||\r\n    length === 0 ||\r\n    (typeof length === \"number\" && length > 0 && length - 1 in obj)\r\n  );\r\n}\r\n\r\n// end helpers varabuls\r\n\r\n/**\r\n * start Codeing  library\r\n */\r\n\r\n/**\r\n * @param {Function} factory\r\n * @param {Window} global\r\n */\r\n\r\n(function (global, factory) {\r\n  \"use strict\";\r\n\r\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n    module.exports = global.document ?\r\n      factory(global, true) :\r\n      function (w) {\r\n        if (!w.document) {\r\n          error(\"UI Require window with a document\");\r\n        }\r\n        return factory(w);\r\n      };\r\n  } else {\r\n    factory(global);\r\n  }\r\n})(\r\n  typeof window !== \"undefined\" ? window : this,\r\n  (function (w, noGlobal) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @param {Element | Array | Node} element\r\n     */\r\n    var UI = function (element) {\r\n      /**\r\n        *ui(element) -> {\r\n            methods\r\n        }\r\n        ui(element).val,.html.text.fade\r\n        */\r\n\r\n      return new UI.pr.init(element);\r\n    };\r\n\r\n    var arr = [],\r\n      doc = document || doc,\r\n      slice = arr.slice,\r\n      push = arr.push,\r\n      c2t = {},\r\n      toStr = c2t.toString,\r\n      getprot = c2t.getPrototypeOf,\r\n      hasOwn = c2t.hasOwnProperty,\r\n      fntostr = hasOwn.toString,\r\n      objfstr = fntostr.call(Object);\r\n\r\n    UI.pr = UI.prototype = {\r\n      test: function () {\r\n        print(this.text());\r\n      },\r\n      end: function (index) {\r\n        if (index) {\r\n          let self = this;\r\n          for (let i = 0; i <= index; i++) {\r\n            if (self.prev !== undefined) {\r\n              self = self.end();\r\n            } else {\r\n              self = UI(document);\r\n              break;\r\n            }\r\n          }\r\n          return self;\r\n        }\r\n        return this.prev !== undefined ? this.prev : UI(document);\r\n      },\r\n      each: function (callback) {\r\n        each.call(this, callback);\r\n        return this;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Number} index\r\n       */\r\n      eq: function (index) {\r\n        index = parseInt(index) || 0;\r\n        let prev = this;\r\n        let n = new UI.pr.init(this[index], prev);\r\n        return n;\r\n      },\r\n\r\n      text: function (val) {\r\n        if (!val || val.isEmpty()) {\r\n          let text = [];\r\n          this.get_set_ele_prop(\"textContent\", function (e, i) {\r\n            text.push(this);\r\n          });\r\n          return !text.isEmpty() ? (text.length == 1 ? text[0] : text) : \"\";\r\n        } else {\r\n          this.get_set_ele_prop(\"textContent\", function (e, i) {\r\n            e[i] = val;\r\n          });\r\n          return this;\r\n        }\r\n      },\r\n      html: function (val) {\r\n        if (!val || val.isEmpty()) {\r\n          let html = [];\r\n          this.get_set_ele_prop(\"innerHTML\", function (e, i) {\r\n            html.push(this);\r\n          });\r\n          return !html.isEmpty() ? (html.length == 1 ? html[0] : html) : \"\";\r\n        } else {\r\n          this.get_set_ele_prop(\"innerHTML\", function (e, i) {\r\n            e[i] = val;\r\n          });\r\n          return this;\r\n        }\r\n      },\r\n      val: function (val) {\r\n        if (!val || val.isEmpty()) {\r\n          let val = [];\r\n          this.get_set_ele_prop(\"value\", function (e, i) {\r\n            val.push(this);\r\n          });\r\n          return !val.isEmpty() ? (val.length == 1 ? val[0] : val) : \"\";\r\n        } else {\r\n          this.get_set_ele_prop(\"value\", function (e, i) {\r\n            e[i] = val;\r\n          });\r\n          return this;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * css function to get or set css property into Element\r\n       * exapmles:\r\n       * => css(\"font-size, font-weight\") return arr has a values [\"16px\", \"400\"]\r\n       * => css(\"font-size\") return value \"16px\"\r\n       * => css({font-size: 18, font-weight: \"bold\"}) set values and return UI constractur\r\n       * => css(\"font-size\" \"18\") set values and return arr has a values [\"16px\", \"400\"]\r\n       *\r\n       * @param {Object | string} prop\r\n       * @param {String} val\r\n       * @returns {UI | Array}\r\n       *\r\n       */\r\n      css: function (prop, val) {\r\n        let self = this;\r\n        if (!val || val.isEmpty()) {\r\n          if (typeof prop == \"string\") {\r\n            let computed = [],\r\n              splited = prop.split(\",\");\r\n            if (Array.isArray(splited)) {\r\n              splited.each(function (prop) {\r\n                self.get_computed_style(prop.trim(), function () {\r\n                  computed.push(this);\r\n                });\r\n              });\r\n            } else {\r\n              this.get_computed_style(prop.trim(), function () {\r\n                computed.push(this);\r\n              });\r\n            }\r\n            return computed != [] && !computed.isEmpty() ?\r\n              computed.length == 1 ?\r\n              computed[0] :\r\n              computed :\r\n              undefined;\r\n          } else if (typeof prop == \"object\") {\r\n            prop.each(function (val, k) {\r\n              self.get_set_ele_prop(\"style\", function (e, p) {\r\n                if (typeof val == \"number\") val += \"px\";\r\n                e[p][k] = val;\r\n              });\r\n            });\r\n            return this;\r\n          }\r\n        } else {\r\n          this.get_set_ele_prop(\"style\", function (e, p) {\r\n            e[p][prop] = val;\r\n          });\r\n          return this;\r\n        }\r\n      },\r\n      /**\r\n       *\r\n       * @param {Number | string} speed\r\n       * @param {Function} callback\r\n       * show Elemnt if this hide => (display: \"none\")\r\n       */\r\n      delay: function (secound) {\r\n        secound = this.get_speed(secound);\r\n        let start = new Date();\r\n        while (true) {\r\n          if (new Date() - start > secound) {\r\n            return this;\r\n          }\r\n        }\r\n      },\r\n      /**\r\n       *\r\n       * @param {Event} evt\r\n       * @param {Function} callback\r\n       * @param {Boolean} options\r\n       * @returns {UI}\r\n       * on() function set event to elem\r\n       * examples s(\"div\").on(\"click\", function(e,i) {\r\n       *      console.log(e)\r\n       * })\r\n       */\r\n      on: function (evt, callback, preventDefulte = false, opt = false) {\r\n        if (!isFunc(callback)) return UI.err(\"Callback is Not a function\");\r\n        evt = evt.toLowerCase();\r\n        if (evt == \"hover\") {\r\n          evt = \"mouseenter\";\r\n        } else if (evt == \"blur\") {\r\n          evt = \"mouseleave\";\r\n        }\r\n        let self = this;\r\n        this.each(function (_, i) {\r\n          this.addEventListener(\r\n            evt,\r\n            function (e) {\r\n              if (preventDefulte) e.preventDefault();\r\n              if (isFunc(callback)) {\r\n                callback.call(this, e, i, self);\r\n              }\r\n            },\r\n            opt\r\n          );\r\n        });\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Attr} attrName\r\n       * @param {String} attrVal\r\n       */\r\n      attr: function (attrName, attrVal) {\r\n        if (!attrName) return this;\r\n\r\n        if (!UI.isEmpty(attrVal)) {\r\n          this.each(function () {\r\n            this.setAttribute(attrName, attrVal);\r\n          });\r\n          return this;\r\n        } else {\r\n          let arr = [];\r\n          if (!UI.isEmpty(attrName)) {\r\n            this.each(function () {\r\n              arr.push(this.getAttribute(attrName));\r\n            });\r\n            return arr;\r\n          }\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {String} className\r\n       */\r\n      addClass: function (className) {\r\n        if (UI.isEmpty(className)) return UI.err(\"Pleas Input Class Name\");\r\n        if (type(className) != \"string\") {\r\n          return UI.err(\"Class Name is Note String\");\r\n        }\r\n        this.each(function () {\r\n          this.classList.add(className);\r\n        });\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String} className\r\n       */\r\n      removeClass: function (className) {\r\n        if (UI.isEmpty(className)) return UI.err(\"Pleas Input Class Name\");\r\n        if (type(className) != \"string\") {\r\n          return UI.err(\"Class Name is Note String\");\r\n        }\r\n        this.each(function () {\r\n          this.classList.remove(className);\r\n        });\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String} className\r\n       */\r\n      toggleClass: function (className) {\r\n        if (UI.isEmpty(className)) return UI.err(\"Pleas Input Class Name\");\r\n        if (type(className) != \"string\") {\r\n          return UI.err(\"Class Name is Note String\");\r\n        }\r\n        this.each(function () {\r\n          this.classList.toggle(className);\r\n        });\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String} className\r\n       * @returns {Boolean}\r\n       */\r\n      hasClass: function (className) {\r\n        if (UI.isEmpty(className)) return UI.err(\"Pleas Input Class Name\");\r\n        if (type(className) != \"string\") {\r\n          return UI.err(\"Class Name is Note String\");\r\n        }\r\n        let classList = [];\r\n        this.each(function () {\r\n          classList.push(...UI.makeArr(this.classList));\r\n          //return classList;\r\n        });\r\n        return classList.indexOf(className) >= 0 ? true : false;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Element} selector\r\n       */\r\n      parentUntil: function (selector) {\r\n        if (!UI.isElem(selector)) selector = document.querySelector(selector);\r\n        let parentNode = this.makeParentTree();\r\n        let matches = [];\r\n        this.each(function (_, i) {\r\n          let j = 0;\r\n          while (j < parentNode[i].length) {\r\n            if (matches.indexOf(parentNode[i][j]) >= 0) {\r\n              j++;\r\n              continue;\r\n            }\r\n            if (selector == parentNode[i][j]) {\r\n              matches.push(parentNode[i][j]);\r\n              break;\r\n            }\r\n            matches.push(parentNode[i][j]);\r\n            j++;\r\n          }\r\n        });\r\n        return new UI.pr.init(matches, this);\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Element} selector\r\n       */\r\n      parents: function (selector) {\r\n        if (!UI.isElem(selector)) selector = document.querySelector(selector);\r\n        let parentNode = this.makeParentTree();\r\n        let matches = [];\r\n        this.each(function (_, i) {\r\n          let j = 0;\r\n          while (j < parentNode[i].length) {\r\n            if (matches.indexOf(parentNode[i][j]) >= 0) {\r\n              j++;\r\n              continue;\r\n            }\r\n            if (selector == parentNode[i][j]) {\r\n              matches.push(parentNode[i][j]);\r\n              break;\r\n            }\r\n            j++;\r\n          }\r\n        });\r\n\r\n        return new UI.pr.init(matches, this);\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Element} selector\r\n       */\r\n      parent: function () {\r\n        let matches = [];\r\n        this.each(function (_, i) {\r\n          if (matches.indexOf(this.parentElement) == -1) {\r\n            matches.push(this.parentElement);\r\n          }\r\n        });\r\n\r\n        return new UI.pr.init(matches, this);\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Element} selector\r\n       */\r\n      siblings: function (selector) {\r\n        if (!UI.isElem(selector))\r\n          selector = UI.makeArr(document.querySelectorAll(selector));\r\n        let matc = [];\r\n        this.each(function () {\r\n          let parent = this.parentElement;\r\n          let child = [...UI.makeArr(parent.children)];\r\n          let j = 0;\r\n          while (j < child.length) {\r\n            if (this == child[j] || matc.indexOf(child[j]) >= 0) {\r\n              j++;\r\n              continue;\r\n            }\r\n            if (!UI.isEmpty(selector)) {\r\n              if (selector.indexOf(child[j]) >= 0) {\r\n                selector.each(function () {\r\n                  matc.push(this);\r\n                });\r\n              }\r\n            } else {\r\n              matc.push(child[j]);\r\n            }\r\n            //console.log(selector.indexOf(child[j]) >= 0, child[j]);\r\n            j++;\r\n          }\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n      next: function () {\r\n        let matc = [];\r\n        this.each(function () {\r\n          if (\r\n            !UI.isEmpty(this.nextElementSibling) &&\r\n            this.nextElementSibling != null\r\n          ) {\r\n            matc.push(this.nextElementSibling);\r\n          }\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n      prev: function () {\r\n        let matc = [];\r\n        this.each(function () {\r\n          if (\r\n            !UI.isEmpty(this.previousElementSibling) &&\r\n            this.previousElementSibling != null\r\n          ) {\r\n            matc.push(this.previousElementSibling);\r\n          }\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Element} selector\r\n       */\r\n      children: function (selector) {\r\n        if (!UI.isElem(selector))\r\n          selector = UI.makeArr(document.querySelectorAll(selector));\r\n        let matc = [];\r\n        this.each(function () {\r\n          let child = [...UI.makeArr(this.children)];\r\n          let j = 0;\r\n          while (j < child.length) {\r\n            if (this == child[j] || matc.indexOf(child[j]) >= 0) {\r\n              j++;\r\n              continue;\r\n            }\r\n            if (!UI.isEmpty(selector)) {\r\n              if (selector.indexOf(child[j]) >= 0) {\r\n                selector.each(function () {\r\n                  matc.push(this);\r\n                });\r\n              }\r\n            } else {\r\n              matc.push(child[j]);\r\n            }\r\n            //console.log(selector.indexOf(child[j]) >= 0, child[j]);\r\n            j++;\r\n          }\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n      frist: function () {\r\n        let matc = [];\r\n        this.each(function () {\r\n          matc.push(this.firstElementChild);\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n      last: function () {\r\n        let matc = [];\r\n        this.each(function () {\r\n          matc.push(this.lastElementChild);\r\n        });\r\n        return new UI.pr.init(matc, this);\r\n      },\r\n\r\n      remove: function (index) {\r\n        if (index) {\r\n          this[index].remove();\r\n        } else {\r\n          this.each(function () {\r\n            this.remove();\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      empty: function (index) {\r\n        if (typeof index == \"number\") {\r\n          this[index].innerHTML = \"\";\r\n        } else {\r\n          this.each(function () {\r\n            this.innerHTML = \"\";\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String | Object} key\r\n       * @param {string} val\r\n       * @returns {UI | string}\r\n       */\r\n      data: function (key, val) {\r\n        if (!val) {\r\n          if (type(key) == \"object\") {\r\n            for (let k in key) {\r\n              if (type(key[k]) == \"function\") {\r\n                continue;\r\n              } else {\r\n                this.attr(\"data-\" + k, key[k]);\r\n              }\r\n            }\r\n            return this;\r\n          } else if (type(k) == \"string\") {\r\n            return this.attr(\"data-\" + k);\r\n          }\r\n        } else {\r\n          this.attr(\"data-\" + key, val);\r\n          return this;\r\n        }\r\n      },\r\n      fadeIn: function (speed, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          self.makeFade(this, speed, callback, \"in\");\r\n        });\r\n        return this;\r\n      },\r\n      fadeOut: function (speed, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          self.makeFade(this, speed, callback, \"out\");\r\n        });\r\n        return this;\r\n      },\r\n      fadeToggle: function (speed, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          if (window.getComputedStyle(this).opacity <= 0) {\r\n            self.fadeIn(speed, callback);\r\n          } else {\r\n            self.fadeOut(speed, callback);\r\n          }\r\n        });\r\n        return this;\r\n      },\r\n      show: function (speed, display_type, callback) {\r\n        let d = this.css(\"display\"),\r\n          self = this;\r\n        this.css(\"display\", \"none\");\r\n        if (speed) {\r\n          this.each(function (_, i) {\r\n            let true_d = type(d) == \"array\" ? d[i] : d;\r\n            true_d = true_d == \"none\" ? display_type || \"block\" : true_d;\r\n            this.style.display = true_d;\r\n          });\r\n          this.fadeIn(speed, callback);\r\n        } else {\r\n          this.each(function (_, i) {\r\n            let true_d = type(d) == \"array\" ? d[i] : d;\r\n            true_d = true_d == \"none\" ? display_type || \"block\" : true_d;\r\n            this.style.display = true_d;\r\n            if (callback) {\r\n              if (isFunc) {\r\n                callback.call(this, self);\r\n              } else {\r\n                UI.err(\"CallBack Mus't Be Fuction\");\r\n              }\r\n            }\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      hide: function (speed, callback) {\r\n        let self = this;\r\n        if (speed) {\r\n          this.fadeOut(speed, function (e) {\r\n            e.each(function () {\r\n              this.style.display = \"none\";\r\n              if (callback) {\r\n                if (isFunc) {\r\n                  callback.call(this, self);\r\n                } else {\r\n                  UI.err(\"CallBack Mus't Be Fuction\");\r\n                }\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          this.each(function () {\r\n            this.style.display = \"none\";\r\n            if (callback) {\r\n              if (isFunc) {\r\n                callback.call(this, self);\r\n              } else {\r\n                UI.err(\"CallBack Mus't Be Fuction\");\r\n              }\r\n            }\r\n          });\r\n        }\r\n        return this;\r\n      },\r\n      toggle: function (speed, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          if (window.getComputedStyle(this).display == \"none\") {\r\n            UI(this).show(speed, callback);\r\n          } else {\r\n            UI(this).hide(speed, callback);\r\n          }\r\n        });\r\n        return this;\r\n      },\r\n\r\n      slideDown: function (speed, display, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          self.sldown(this, speed, display, callback);\r\n        });\r\n        return this;\r\n      },\r\n      slideUp: function (speed, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          self.slup(this, speed, callback);\r\n        });\r\n        return this;\r\n      },\r\n      slideToggle: function (speed, display, callback) {\r\n        let self = this;\r\n        this.each(function () {\r\n          if (\r\n            getComputedStyle(this).display == \"none\" ||\r\n            parseFloat(getComputedStyle(this).height) <= 0\r\n          ) {\r\n            self.sldown(this, speed, display, callback);\r\n          } else {\r\n            self.slup(this, speed, callback);\r\n          }\r\n        });\r\n        return this;\r\n      },\r\n    };\r\n\r\n    \"click input focusIn focusOut mouseEnter keyPress unload scroll resize load focus submit dbClick mouseLeave keyDown keyUp blur hover change\"\r\n    .split(\" \")\r\n      .each(function (e) {\r\n        UI.pr[e] = function (callback) {\r\n          if (!callback) {\r\n            for (let i = 0; i < this.length; i++) {\r\n              if (e.toLowerCase() == \"focus\" || e.toLowerCase() == \"focusin\") {\r\n                this[i].focus();\r\n                return this;\r\n              } else if (e.toLowerCase() == \"click\") {\r\n                this[i].click();\r\n                return this;\r\n              }\r\n              this[i][\"on\" + e.toLowerCase()]();\r\n            }\r\n            return this;\r\n          }\r\n          if (!isFunc(callback)) return UI.err(\"Callback is Not a function\");\r\n          this.addEvent(e, callback);\r\n          return this;\r\n        };\r\n      });\r\n\r\n    /**\r\n     * marge to object and return frist\r\n     * marge to object and return new object\r\n     * marg object in this scobe\r\n     * examples\r\n     * UI.omg(true, {x:\"x\"}, {y:\"y\"}) -> return new object ->     {x:\"x\" y:\"y\"}\r\n     * UI.omg({x:1}, {y:2}) -> marge to object in frist object -> {x:1, y:2}\r\n     * UI.omg({x:1}) -> this += {x: 1}\r\n     */\r\n    UI.omg = UI.pr.omg = function omg() {\r\n      let opt,\r\n        src,\r\n        arr,\r\n        clone,\r\n        copy,\r\n        cpia,\r\n        target = arguments[0],\r\n        deep,\r\n        i = 1,\r\n        len = arguments.length;\r\n\r\n      if (typeof target == \"boolean\") {\r\n        deep = target;\r\n        target = i || {};\r\n        i++;\r\n      }\r\n\r\n      if (typeof target == \"object\" && !isFunc(target)) {\r\n        target = {};\r\n      }\r\n\r\n      if (i == len) {\r\n        target = this;\r\n        i--;\r\n      }\r\n\r\n      for (; i < len; i++) {\r\n        if ((opt = arguments[i]) != null) {\r\n          for (let name in opt) {\r\n            copy = opt[name];\r\n\r\n            if (name == \"__proto__\" || target == copy) {\r\n              continue;\r\n            }\r\n\r\n            if (\r\n              deep &&\r\n              copy &&\r\n              (UI.isPlainObject(copy) || (cpia = Array.isArray(copy)))\r\n            ) {\r\n              src = target[name];\r\n              if (cpia && !Array.isArray(src)) {\r\n                clone = [];\r\n              } else if (cpia && !UI.isPlainObject(src)) {\r\n                clone = {};\r\n              } else {\r\n                clone = src;\r\n              }\r\n              cpia = false;\r\n\r\n              target[name] = UI.omg(deep, clone, copy);\r\n            } else if (copy !== undefined) {\r\n              target[name] = copy;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return target;\r\n    };\r\n\r\n    UI.omg({\r\n      v: \"1.00\",\r\n      f: function () {},\r\n      err: function (msg) {\r\n        return new Error(msg);\r\n      },\r\n\r\n      isPlainObject(obj) {\r\n        let c, p;\r\n\r\n        if (!obj || toStr.call(obj) !== \"[object Object]\") {\r\n          return false;\r\n        }\r\n        p = getprot(obj);\r\n\r\n        if (!p) {\r\n          return true;\r\n        }\r\n        c = hasOwn.call(p, \"constructor\") && p.constructor;\r\n\r\n        return typeof c == \"function\" && fntostr.call(c) == objfstr;\r\n      },\r\n\r\n      isEmptyObj(obj) {\r\n        let n;\r\n        for (n in obj) return false;\r\n        return true;\r\n      },\r\n\r\n      makeArr: function (arr, ret) {\r\n        ret = ret || [];\r\n\r\n        if (arr !== null) {\r\n          if (isArrLike(Object(arr))) {\r\n            UI.merg(ret, typeof arr == \"string\" ? [arr] : arr);\r\n          } else {\r\n            push.call(ret, arr);\r\n          }\r\n        }\r\n        return ret;\r\n      },\r\n\r\n      merg: function (f, s) {\r\n        let l = +s.length,\r\n          x = 0,\r\n          i = f.length;\r\n\r\n        for (; x < l; x++) {\r\n          f[i++] = s[x];\r\n        }\r\n        f.length = i;\r\n        return f;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Array | Object} arr\r\n       * @param {Function} callback\r\n       */\r\n      each: function (arr, callback) {\r\n        each.call(arr, callback);\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Element} ele\r\n       * @returns {Boolean}\r\n       */\r\n      isElem: function (ele) {\r\n        if (!ele) return false;\r\n\r\n        let ts = ele.nodeType;\r\n\r\n        return ts !== undefined ? true : false;\r\n      },\r\n      isEmpty: function (arg) {\r\n        return arg.isEmpty();\r\n      },\r\n    });\r\n\r\n    UI.each(\r\n      \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\r\n        \" \"\r\n      ),\r\n      function (e, i) {\r\n        c2t[\"[object \" + e + \"]\"] = e.toLowerCase();\r\n      }\r\n    );\r\n\r\n    UI.pr.omg({\r\n      /**\r\n       * @param {string} prop,\r\n       * @returns {object | Function | String | Array}\r\n       */\r\n      get_set_ele_prop: function (prop, callback) {\r\n        this.each(function (e, i) {\r\n          callback.call(this[prop], e, prop, i);\r\n        });\r\n        return this;\r\n      },\r\n      /**\r\n       *\r\n       * @param {String} prop\r\n       * @param {Function} callback\r\n       */\r\n      get_computed_style: function (prop, callback) {\r\n        this.each(function (e, i) {\r\n          let cs = getComputedStyle(e);\r\n          if (prop == \"*\") {\r\n            callback.call(cs, cs, prop);\r\n          } else {\r\n            if (isFunc(callback)) {\r\n              callback.call(cs[prop], cs[prop], prop, i);\r\n            }\r\n          }\r\n        });\r\n        return this;\r\n      },\r\n      get_speed: function (speed) {\r\n        speed = speed || 400;\r\n        if (typeof speed == \"number\") {\r\n          return speed;\r\n        } else if (typeof speed == \"string\") {\r\n          let t = \"slow\";\r\n          switch (speed) {\r\n            case \"slow\":\r\n              t = 800;\r\n              break;\r\n            case \"medium\":\r\n              t = 400;\r\n              break;\r\n            case \"fast\":\r\n              t = 200;\r\n              break;\r\n            default:\r\n              t = 400;\r\n          }\r\n          return t;\r\n        }\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {Event} evt_name\r\n       * @param {Function} callback\r\n       * @return {Element}\r\n       */\r\n      addEvent: function (evt_name, callback) {\r\n        evt_name = evt_name.toLowerCase();\r\n        if (evt_name == \"hover\") {\r\n          evt_name = \"mouseenter\";\r\n        }\r\n        let self = this;\r\n        this.each(function (_, i) {\r\n          this[\"on\" + evt_name] = function (e) {\r\n            if (!isFunc(callback)) return UI.err(\"Callback is Not a function\");\r\n            callback.call(this, e, i, self);\r\n          };\r\n        });\r\n        return this;\r\n      },\r\n      makeParentTree: function () {\r\n        let parents = [],\r\n          prevEle;\r\n        this.each(function () {\r\n          prevEle = this;\r\n          let ele_p = [];\r\n          while (prevEle.constructor.name != \"HTMLHtmlElement\") {\r\n            prevEle = prevEle.parentElement;\r\n            ele_p.push(prevEle);\r\n          }\r\n          parents.push(ele_p);\r\n        });\r\n\r\n        return parents;\r\n      },\r\n\r\n      makeFade: function (ele, speed, callback, type = \"in\") {\r\n        let self = this;\r\n        if (type == \"in\") {\r\n          ele.style.opacity = 0;\r\n          speed = this.get_speed(speed);\r\n          let last = +new Date();\r\n          let tick = function () {\r\n            ele.style.opacity = +ele.style.opacity + (new Date() - last) / speed;\r\n            last = +new Date();\r\n\r\n            if (+ele.style.opacity < 1) {\r\n              (window.requestAnimationFrame && requestAnimationFrame(tick)) ||\r\n              setTimeout(tick, 16);\r\n            } else {\r\n              if (callback) {\r\n                if (isFunc(callback)) {\r\n                  callback.call(ele, self);\r\n                } else {\r\n                  UI.err(\"CallBack Mus't Be Fuction\");\r\n                }\r\n              }\r\n            }\r\n          };\r\n          tick();\r\n        } else if (type == \"out\") {\r\n          ele.style.opacity = 1;\r\n          speed = this.get_speed(speed);\r\n          let last = +new Date();\r\n          let tick = function () {\r\n            ele.style.opacity = Math.abs(\r\n              +ele.style.opacity - (new Date() - last) / speed\r\n            );\r\n            last = +new Date();\r\n            if (+ele.style.opacity > 0) {\r\n              (window.requestAnimationFrame && requestAnimationFrame(tick)) ||\r\n              setTimeout(tick, 16);\r\n            } else {\r\n              if (callback) {\r\n                if (isFunc(callback)) {\r\n                  callback.call(ele, self);\r\n                } else {\r\n                  UI.err(\"CallBack Mus't Be Fuction\");\r\n                }\r\n              }\r\n            }\r\n          };\r\n          tick();\r\n        }\r\n        return this;\r\n      },\r\n\r\n      slup: function (target, duration, callback) {\r\n        duration = this.get_speed(duration);\r\n        target.style.transitionProperty = \"height, margin, padding\";\r\n        target.style.transitionDuration = duration + \"ms\";\r\n        target.style.boxSizing = \"border-box\";\r\n        target.style.height = target.offsetHeight + \"px\";\r\n        // target.offsetHeight;\r\n        target.style.overflow = \"hidden\";\r\n        target.style.height = 0;\r\n        target.style.paddingTop = 0;\r\n        target.style.paddingBottom = 0;\r\n        target.style.marginTop = 0;\r\n        target.style.marginBottom = 0;\r\n        window.setTimeout(() => {\r\n          target.style.display = \"none\";\r\n          target.style.removeProperty(\"height\");\r\n          target.style.removeProperty(\"padding-top\");\r\n          target.style.removeProperty(\"padding-bottom\");\r\n          target.style.removeProperty(\"margin-top\");\r\n          target.style.removeProperty(\"margin-bottom\");\r\n          target.style.removeProperty(\"overflow\");\r\n          target.style.removeProperty(\"transition-duration\");\r\n          target.style.removeProperty(\"transition-property\");\r\n          if (callback) callback.call(target, this);\r\n        }, duration);\r\n      },\r\n      sldown: function (target, duration, disp, callback) {\r\n        duration = this.get_speed(duration);\r\n        target.style.removeProperty(\"display\");\r\n        let display = window.getComputedStyle(target).display;\r\n\r\n        if (display === \"none\") display = disp || \"block\";\r\n        let height = target.offsetHeight;\r\n        target.style.overflow = \"hidden\";\r\n        target.style.height = 0;\r\n        target.style.paddingTop = 0;\r\n        target.style.paddingBottom = 0;\r\n        target.style.marginTop = 0;\r\n        target.style.marginBottom = 0;\r\n        target.style.display = display;\r\n        target.offsetHeight;\r\n        target.style.boxSizing = \"border-box\";\r\n        target.style.transitionProperty = \"height, margin, padding\";\r\n        target.style.transitionDuration = duration + \"ms\";\r\n        target.style.height = height + \"px\";\r\n        target.style.removeProperty(\"padding-top\");\r\n        target.style.removeProperty(\"padding-bottom\");\r\n        target.style.removeProperty(\"margin-top\");\r\n        target.style.removeProperty(\"margin-bottom\");\r\n        window.setTimeout(() => {\r\n          target.style.removeProperty(\"height\");\r\n          target.style.removeProperty(\"overflow\");\r\n          target.style.removeProperty(\"transition-duration\");\r\n          target.style.removeProperty(\"transition-property\");\r\n          if (callback) callback.call(target, this);\r\n        }, duration);\r\n      },\r\n    });\r\n\r\n    function isWindow(obj) {\r\n      return obj != null && obj == obj.window;\r\n    }\r\n\r\n    w.isWindow = isWindow;\r\n    /**\r\n     *\r\n     * @param {any} arg\r\n     * @returns {String}\r\n     * type function return type of arg\r\n     * examples\r\n     * type({}) -> object\r\n     */\r\n    function type(obj) {\r\n      if (obj == null) {\r\n        return obj + \"\";\r\n      }\r\n      return typeof obj === \"object\" || typeof obj === \"function\" ?\r\n        c2t[toStr.call(obj)] || \"object\" :\r\n        typeof obj;\r\n    }\r\n    w.type = type;\r\n\r\n    /**\r\n     * @param {Element | Array | Node | String}\r\n     */\r\n    var init = (UI.pr.init = function ( /**Element | Array | Node*/ elem, root) {\r\n      if (!elem) return;\r\n      if (elem.isEmpty()) return;\r\n      root = root || rootUi;\r\n      if (UI.isElem(elem)) {\r\n        this[0] = elem;\r\n        this.length = 1;\r\n        let x = [...Array.from(this)];\r\n        x.prev = root;\r\n        x.__proto__ = this.__proto__;\r\n        return x;\r\n      } else if (type(elem) == \"string\") {\r\n        let x = UI.makeArr(document.querySelectorAll(elem));\r\n        x.prev = root;\r\n        x.__proto__ = this.__proto__;\r\n        return x;\r\n      } else if (type(elem) == \"array\" || isArrLike(elem)) {\r\n        let x = UI.makeArr(elem);\r\n        x.prev = root;\r\n        x.__proto__ = this.__proto__;\r\n        return x;\r\n      }\r\n    });\r\n\r\n    init.prototype = UI.pr;\r\n    var rootUi = UI(document);\r\n\r\n    if (typeof define == \"function\" && define.amd) {\r\n      define(\"UI\", [], function () {\r\n        return UI;\r\n      });\r\n    }\r\n\r\n    var ui = window.UI,\r\n      _s = window.$;\r\n\r\n    UI.noConflict = function (deep) {\r\n      if (window.s === UI) {\r\n        window.s = _s;\r\n      }\r\n\r\n      if (deep && window.UI === UI) {\r\n        window.UI = ui;\r\n      }\r\n\r\n      return UI;\r\n    };\r\n\r\n    if (!noGlobal) {\r\n      window.ui = window.s = UI;\r\n    }\r\n\r\n    return UI;\r\n  })(window)\r\n);"],"file":"ui_lib.js"}